{"version":3,"sources":["../src/suntime.ts","../src/destime.ts","../src/index.ts"],"names":["suntime","latitude","longitude","timezone","d","radians","degrees","a","y","m","j_day","n_star","n","solar_noon","M","C","L","j_transit","D","cos_omega","omega","j_set","j_rise","utc_time_set","utc_time_rise","tz_offset","local_rise","local_set","convertDecimalTime","decimalTime","hours","minutes","seconds","formattedHours","formattedMinutes","formattedSeconds","ampm","formattedTime","timeDiff","decimalTime1","decimalTime2","seconds1","seconds2","diffSeconds","decimalDiff","formattedTimeDiff","suntimes","sunriseDecimal","sunsetDecimal","sunrise","sunset","daytime"],"mappings":"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","sourcesContent":["/**\n * Calculates the local sunrise and sunset times based on the latitude, longitude, and timezone provided.\n *\n * Original Author\n * https://gist.github.com/ruiokada/b28076d4911820ddcbbc\n *\n * Computations are based on the formulas found in:\n *   https://en.wikipedia.org/wiki/Julian_day#Converting_Julian_or_Gregorian_calendar_date_to_Julian_Day_Number\n *   https://en.wikipedia.org/wiki/Sunrise_equation#Complete_calculation_on_Earth\n *\n * @param {number} latitude - The latitude of the location.Latitude of location (South is negative)\n * @param {number} longitude - The longitude of the location.Longitude of location (West is negative)\n * @param {number} timezone - The timezone offset in hours. If not provided, the function uses the local timezone offset.\n * Timezone hour offset. e.g. Pacific/Los Angeles Standard Time is -8 (Optional, defaults to system timezone)\n * @returns { (number | null)[]} - The local time of sunrise and sunset in 24-hour format.Returns an array of length 2 with the sunrise and sunset times as floats on 24-hour time.\n *  e.g. 6.5 is 6:30am, 23.2 is 11:12pm, 0.3 is 12:18am .Returns an array with [null, -1] if the sun never rises, and [-1, null] if the sun never sets.\n *\n *\n */\nexport default function suntime(\n    latitude: number,\n    longitude: number,\n    timezone: number\n  ): (number | null)[] {\n    const d = new Date();\n    const radians = Math.PI / 180.0;\n    const degrees = 180.0 / Math.PI;\n  \n    const a = Math.floor((14 - (d.getMonth() + 1.0)) / 12);\n    const y = d.getFullYear() + 4800 - a;\n    const m = d.getMonth() + 1 + 12 * a - 3;\n    const j_day =\n      d.getDate() +\n      Math.floor((153 * m + 2) / 5) +\n      365 * y +\n      Math.floor(y / 4) -\n      Math.floor(y / 100) +\n      Math.floor(y / 400) -\n      32045;\n    const n_star = j_day - 2451545.0009 - longitude / 360.0;\n    const n = Math.floor(n_star + 0.5);\n    const solar_noon = 2451545.0009 - longitude / 360.0 + n;\n    const M = 356.047 + 0.9856002585 * n;\n    const C =\n      1.9148 * Math.sin(M * radians) +\n      0.02 * Math.sin(2 * M * radians) +\n      0.0003 * Math.sin(3 * M * radians);\n    const L = (M + 102.9372 + C + 180) % 360;\n    const j_transit =\n      solar_noon +\n      0.0053 * Math.sin(M * radians) -\n      0.0069 * Math.sin(2 * L * radians);\n    const D =\n      Math.asin(Math.sin(L * radians) * Math.sin(23.45 * radians)) * degrees;\n    const cos_omega =\n      (Math.sin(-0.83 * radians) -\n        Math.sin(latitude * radians) * Math.sin(D * radians)) /\n      (Math.cos(latitude * radians) * Math.cos(D * radians));\n    // sun never rises\n    if (cos_omega > 1) {\n      return [null, -1];\n    }\n    // sun never sets\n    if (cos_omega < -1) {\n      return [-1, null];\n    }\n  \n    // get Julian dates of sunrise/sunset\n    const omega = Math.acos(cos_omega) * degrees;\n    const j_set = j_transit + omega / 360.0;\n    const j_rise = j_transit - omega / 360.0;\n  \n    /*\n     * get sunrise and sunset times in UTC\n     * Check section \"Finding Julian date given Julian day number and time of\n     *  day\" on wikipedia for where the extra \"+ 12\" comes from.\n     */\n    const utc_time_set = 24 * (j_set - j_day) + 12;\n    const utc_time_rise = 24 * (j_rise - j_day) + 12;\n    const tz_offset =\n      timezone === undefined ? (-1 * d.getTimezoneOffset()) / 60 : timezone;\n    const local_rise = (utc_time_rise + tz_offset) % 24;\n    const local_set = (utc_time_set + tz_offset) % 24;\n    return [local_rise, local_set];\n  }\n  ","/**\n * Converts a decimal time value to a formatted time string.\n *\n * @param decimalTime - The decimal time value to convert.\n * @returns The formatted time string in the format \"HH:MM:SS AM/PM\".\n */\nexport function convertDecimalTime(decimalTime: number): string {\n  // Extracting hours, minutes, and seconds\n  var hours = Math.floor(decimalTime);\n  var minutes = Math.floor((decimalTime - hours) * 60);\n  var seconds = Math.floor(((decimalTime - hours) * 60 - minutes) * 60);\n\n  // Formatting leading zeros\n  var formattedHours = hours.toString().padStart(2, \"0\");\n  var formattedMinutes = minutes.toString().padStart(2, \"0\");\n  var formattedSeconds = seconds.toString().padStart(2, \"0\");\n\n  // Determining AM/PM\n  var ampm = hours >= 12 ? \"PM\" : \"AM\";\n\n  // Adjusting hours for AM/PM format\n  if (hours > 12) {\n    formattedHours = (hours - 12).toString().padStart(2, \"0\");\n  } else if (hours === 0) {\n    formattedHours = \"12\";\n  }\n\n  // Combining the formatted values\n  var formattedTime =\n    formattedHours +\n    \":\" +\n    formattedMinutes +\n    \":\" +\n    formattedSeconds +\n    \" \" +\n    ampm;\n\n  return formattedTime;\n}\n/**\n * Calculates the time difference between two decimal times and returns the result in HH:MM:SS format.\n *\n * @param decimalTime1 The first decimal time value.\n * @param decimalTime2 The second decimal time value.\n * @returns The time difference between the two decimal times in HH:MM:SS format.\n */\nexport function timeDiff(decimalTime1: number, decimalTime2: number): string {\n  // Convert decimal time to seconds\n  var seconds1 = Math.floor(decimalTime1 * 3600);\n  var seconds2 = Math.floor(decimalTime2 * 3600);\n\n  // Calculate the time difference in seconds\n  var diffSeconds = Math.abs(seconds1 - seconds2);\n\n  // Convert the time difference back to decimal time\n  var decimalDiff = diffSeconds / 3600;\n\n  // Extracting hours, minutes, and seconds\n  var hours = Math.floor(decimalDiff);\n  var minutes = Math.floor((decimalDiff - hours) * 60);\n  var seconds = Math.floor(((decimalDiff - hours) * 60 - minutes) * 60);\n\n  // Formatting leading zeros\n  var formattedHours = hours.toString().padStart(2, \"0\");\n  var formattedMinutes = minutes.toString().padStart(2, \"0\");\n  var formattedSeconds = seconds.toString().padStart(2, \"0\");\n\n  // Combining the formatted values\n  var formattedTimeDiff =\n    formattedHours + \":\" + formattedMinutes + \":\" + formattedSeconds;\n\n  return formattedTimeDiff;\n}\n","import suntime from \"./suntime.ts\";\nimport { convertDecimalTime, timeDiff } from \"./destime.ts\";\n\nexport interface daytimeProps{\n  latitude: number;\n  longitude: number;\n  timezone: number;\n};\n/**\n * Calculates the sunrise, sunset, and daytime duration for a given latitude, longitude, and timezone.\n * --------\n *\n * The latitude of the location.Latitude of location (South is negative)\n *\n * The longitude of the location.Longitude of location (West is negative)\n *\n * The timezone offset in hours. If not provided, the function uses the local timezone offset.\n * Timezone hour offset. e.g. Pacific/Los Angeles Standard Time is -8 (Optional, defaults to system timezone)\n *\n */\nexport function suntimes({ latitude, longitude, timezone }: daytimeProps) {\n  const [sunriseDecimal, sunsetDecimal] = suntime(\n    latitude,\n    longitude,\n    timezone\n  );\n  let sunrise = \"N/A\";\n  let sunset = \"N/A\";\n  let daytime = \"N/A\";\n\n  // Check if sunriseDecimal and sunsetDecimal are not null before converting\n  if (sunriseDecimal !== null && sunsetDecimal !== null) {\n    sunrise = convertDecimalTime(sunriseDecimal);\n    sunset = convertDecimalTime(sunsetDecimal);\n    daytime = timeDiff(sunriseDecimal, sunsetDecimal);\n  }\n\n  // Return the formatted sunrise, sunset, and daytime duration\n  return { sunrise, sunset, daytime };\n}\n"]}